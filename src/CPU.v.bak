// Please include verilog file if you write module in other file
module CPU(
    input             clk,
    input             rst,
    input      [31:0] data_out,
    input      [31:0] instr_out,
    output reg        instr_read,
    output reg        data_read,
    output reg [31:0] instr_addr,
    output reg [31:0] data_addr,
    output reg [3:0]  data_write,
    output reg [31:0] data_in
);

reg [31:0] Reg[0:31];
reg [31:0] pc;
reg [31:0] imm;
reg [6:0] op;
reg [24:0] noopinst;

reg [4:0] rs1, rs2, rd, shamt;
reg [6:0] f7;
reg [2:0] f3; 
reg [11:0] imm12;
reg [19:0] imm20;
reg tmp;

integer i;

reg [31:0] ins;
reg [3:0] state;
reg loadState;
reg delay;//1->delay 1 cycle
reg [15:0] printTime = 16'd0;

parameter MaxPrintTime = 16'd32;

initial begin
	$display("initial");
	ins <= 32'h0;
    state <= 4'd0;
	loadState <= 1'b0;
	delay <= 1'b0;
	for(i=0; i<32; i=i+1)
		Reg[i] <= 32'h0;
    pc <= 32'h0;
	imm <= 32'h0;

    instr_read <= 1'b0;
    data_read <= 1'b0;
    data_write <= 4'h0;
    instr_addr <= 32'h0;
    data_addr <= 32'h0;
    data_in <= 32'h0;	
end

always @(posedge clk) begin
	if(rst == 1'b1) begin
        $display("reset");
		ins <= 32'h0;
        state <= 4'd0;
		loadState <= 1'b0;
		delay <= 1'b0;
		for(i=0; i<32; i=i+1)
			Reg[i] <= 32'h0;
        pc <= 32'h0;
		imm <= 32'h0;

        instr_read <= 1'b0;
        data_read <= 1'b0;
        data_write <= 4'h0;
        instr_addr <= 32'h0;
        data_addr <= 32'h0;
        data_in <= 32'h0;
    end
    else begin
        case(state)
            4'd0:
            begin
				if(printTime < MaxPrintTime)
                	$display("state%d", state);
                instr_read <= 1;
                pc <= instr_addr;
                ins <= instr_out;
				state <= 4'd1;
				if(printTime < MaxPrintTime)
                	$display("pc:%h, ins:%b", pc, ins);

				/*decode*/
				{noopinst, op} <= instr_out;
				/*load*/
				if(loadState == 1'b1)
				begin
					$display("load");
					case(f3)
						//LW
						3'b010:
						begin 
							Reg[rd] <= data_out;
						end
						//LB
						3'b000:
						begin
							Reg[rd] <= {{24{data_out[7]}}, data_out[7:0]};
						end
						//LH
						3'b001:
						begin 
							Reg[rd] <= {{16{data_out[15]}}, data_out[15:0]};
						end
						//LBU
						3'b100:
						begin
							Reg[rd] <= {{24{1'b0}}, data_out[7:0]};
						end
						//LHU
						3'b101:
						begin
							Reg[rd] <= {{16{1'b0}}, data_out[15:0]};
						end
					endcase

					instr_addr <= pc;
					data_read <= 1'b0;//close data reading
					instr_read <= 1'b1;//open instr reading
					state <= 4'd0;
					delay <= 1'b0;
				end
				else
				begin
					if(printTime < MaxPrintTime)
						$display("@%h:%b", pc, instr_out);
					delay <= 1'b0;
					case(op)
						//R-type
						7'b0110011:
						begin
							{f7, rs2, rs1, f3, rd} <= noopinst;
							case({f7, f3})
								//ADD
								10'b0000000000:
								begin
									$display("ADD");
									Reg[rd] <= Reg[rs1] + Reg[rs2];
								end
								//SUB
								10'b0100000000:
								begin
									$display("SUB");
									Reg[rd] <= Reg[rs1] - Reg[rs2];
								end
								//SLL
								10'b0000000001:
								begin
									$display("SLL");
									Reg[rd] <= $unsigned(Reg[rs1]) << Reg[rs2][4:0];
								end
								//SLT
								10'b0000000010:
								begin
									$display("SLT");
									Reg[rd] <= $signed(Reg[rs1]) < $signed(Reg[rs2])? 32'd1 : 32'd0;
								end
								//SLTU
								10'b0000000011:
								begin
									$display("SLTU");
									Reg[rd] <= $unsigned(Reg[rs1]) < $unsigned(Reg[rs2])? 32'd1 : 32'd0;
								end
								//XOR
								10'b0000000100:
								begin
									$display("XOR");
									Reg[rd] <= Reg[rs1] ^ Reg[rs2];
								end
								//SRL
								10'b0000000101:
								begin
									$display("SRL");
									Reg[rd] <= $unsigned(Reg[rs1]) >> Reg[rs2][4:0];
								end
								//SRA
								10'b0100000101:
								begin
									$display("SRA");
									Reg[rd] <= $signed(Reg[rs1]) << Reg[rs2][4:0];
								end
								//OR
								10'b0000000110:
								begin
									$display("OR");
									Reg[rd] <= Reg[rs1] | Reg[rs2];
								end
								//AND
								10'b0000000111:
								begin
									$display("AND");
									Reg[rd] <= Reg[rs1] & Reg[rs2];
								end
							endcase
							pc <= pc + 32'd4;
						end
						//I-type (load)
						7'b0000011:
						begin
							{imm12, rs1, f3, rd} <= noopinst;
							imm <= {{20{imm12[11]}}, imm12[10:0]};
							data_addr <= Reg[rs1] + imm;
							data_read <= 1'b1;
							loadState <= 1'b1;
							delay <= 1'b1;
							pc <= pc + 32'd4;
						end
						//I-type (arithmetic)
						7'b0010011:
						begin
							{imm12, rs1, f3, rd} <= noopinst;
							imm <= {{20{imm12[11]}}, imm12[10:0]};
							shamt <= imm12[3:0];
							case(f3)
								//ADDI
								3'b000:
								begin
									$display("ADDI");
									$display("r%b = r%b(%b) + %b = %b", rd, rs1, Reg[rs1], imm, Reg[rd]);
									Reg[rd] <= Reg[rs1] + imm;
								end
								//SLTI
								3'b010:
								begin 
									$display("SLTI");
									Reg[rd] <= $signed(Reg[rs1]) < $signed(imm)? 32'd1 : 32'd0;
								end
								//SLTIU
								3'b011:
								begin 
									$display("SLTIU");
									Reg[rd] <= $unsigned(Reg[rs1]) < $unsigned(imm)? 32'd1 : 32'd0;
								end
								//XORI
								3'b100:
								begin 
									$display("XORI");
									Reg[rd] <= Reg[rs1] ^ imm;
								end
								//ORI
								3'b110:
								begin 
									$display("ORI");
									Reg[rd] <= Reg[rs1] | imm;
								end
								//ANDI
								3'b111:
								begin 
									$display("ANDI");
									Reg[rd] <= Reg[rs1] & imm;
								end
								//SLLI
								3'b001:
								begin 
									$display("SLLI");
									Reg[rd] <= $unsigned(Reg[rs1]) << shamt;
								end
								//SRLI / SRAI
								3'b101:
								begin
									//SRLI
									if(imm12[10] == 1'b0)
									begin
										$display("SRLI");
										Reg[rd] <= $unsigned(Reg[rs1]) >> shamt;
									end
									//SRAI
									else if(imm12[10] == 1'b1)
									begin
										$display("SRAI");
										Reg[rd] <= $signed(Reg[rs1]) >> shamt;
									end
								end
							endcase
							pc <= pc + 32'd4;
						end
						//I-type (JALR)
						7'b1100111:
						begin
							$display("JALR");
							{imm12, rs1, f3, rd} <= noopinst;
							imm <= {{20{imm12[11]}}, imm12[10:0]};
							tmp <= pc + 32'd4;
							pc <= imm + Reg[rs1];
							Reg[rd] <= tmp;
						end
						//S-type
						7'b0100011:
						begin
							//borrow sign : imm[11:5] -> f7, imm[4:0] -> rd
							{f7, rs2, rs1, f3, rd} <= noopinst;
							imm <= {{20{f7[6]}}, f7, rd};
							case(f3)
								//SW
								3'b010:
								begin
									$display("SW");
									data_write <= 4'b1111;
								end
								//SB
								3'b000:
								begin 
									$display("SB");
									data_write <= 4'b0001;
								end
								//SH
								3'b001:
								begin 
									$display("SH");
									data_write <= 4'b0011;
								end
							endcase
							data_addr <= Reg[rs1] + imm;//M[rs1+imm]
							data_in <= Reg[rs2];//store
							pc <= pc + 32'd4;
						end
						//B-type
						7'b1100011:
						begin
							//borrow sign : imm[12|10:5] -> f7, imm[4:1|11] -> rd
							{f7, rs2, rs1, f3, rd} <= noopinst;
							imm <= {{19{f7[6]}}, f7[6], rd[0], f7[5:0], rd[4:1], 1'b0};
							case(f3)
								//BEQ
								3'b000:
								begin 
									$display("BEQ");
									if(Reg[rs1] == Reg[rs2])
										pc <= pc + imm;
									else
										pc <= pc + 32'd4;
								end
								//BNE
								3'b001:
								begin 
									$display("BNE");
									if(Reg[rs1] != Reg[rs2])
										pc <= pc + imm;
									else
										pc <= pc + 32'd4;
								end
								//BLT
								3'b100:
								begin
									$display("BLT");
									if($signed(Reg[rs1]) < $signed(Reg[rs2]))
										pc <= pc + imm;
									else
										pc <= pc + 32'd4;
								end
								//BGE
								3'b101:
								begin
									$display("BGE");
									if($signed(Reg[rs1]) >= $signed(Reg[rs2]))
										pc <= pc + imm;
									else
										pc <= pc + 32'd4;
								end
								//BLTU
								3'b110:
								begin
									$display("BLTU");
									if($unsigned(Reg[rs1]) < $unsigned(Reg[rs2]))
										pc <= pc + imm;
									else
										pc <= pc + 32'd4;
								end
								//BGEU
								3'b111:
								begin
									$display("BGEU");
									if($unsigned(Reg[rs1]) >= $unsigned(Reg[rs2]))
										pc <= pc + imm;
									else
										pc <= pc + 32'd4;
								end
							endcase
						end
						//U-type (AUIPC)
						7'b0010111:
						begin
							$display("AUIPC");
							{imm20, rd} <= noopinst;
							imm = {imm20, 12'b0};
							Reg[rd] = pc + imm;
							pc = pc + 32'd4;
						end
						//U-type (LUI)
						7'b0110111:
						begin
							$display("LUI");
							{imm20, rd} <= noopinst;
							imm <= {imm20, 12'b0};
							Reg[rd] <= imm;
							pc <= pc + 32'd4;
						end
						//J-type (JAL)
						7'b1101111:
						begin
							$display("JAL");
							{imm20, rd} <= noopinst;
							/*
							imm[31:21] = {11{imm20[19]}};
							imm[20] = imm20[19];
							imm[19:12] = imm20[7:0];
							imm[11] = imm20[8];
							imm[10:1] = imm20[18:9];
							imm[0] = 0;
							*/
							imm = {{11{imm20[19]}}, imm20[19], imm20[7:0], imm20[8], imm[18:9], 1'b0};
							Reg[rd] = pc + 32'd4;
							pc = pc + imm;
							//$display("imm20:%b, rd:%b",imm20, rd);
							//$display("imm:%b, Reg[%b]:%b, pc:%b",imm, rd, Reg[rd], pc);
						end
					endcase	
					if(delay == 1'b1)
						state <= 4'd0;//stay
					else
						state <= 4'd2;
					end
				end
            end
            4'd1:
            begin
				if(printTime < MaxPrintTime)
                	$display("state%d", state);
                instr_read <= 0;
                ins <= instr_out;
				state <= 4'd2;
                if(printTime < MaxPrintTime)
					$display("pc:%h, ins:%b", pc, ins);
            end
            4'd2:
            begin
                if(printTime < MaxPrintTime)
					$display("state%d", state);
                pc <= pc + 32'h4;
                ins <= instr_out;
				state <= 4'd3;
                if(printTime < MaxPrintTime)
					$display("pc:%h, ins:%b", pc, ins);
            end
            4'd3:
            begin
                if(printTime < MaxPrintTime)
					$display("state%d", state);
                instr_read <= 1;
                instr_addr <= pc;
                ins <= instr_out;
				state <= 4'd0;
                if(printTime < MaxPrintTime)
					$display("pc:%h, ins:%b", pc, ins);
            end
		endcase
		if(printTime < MaxPrintTime)
			printTime <= printTime + 1;
    end
end
endmodule
